{"version":3,"sources":["components/ScoreboardCharacter/index.js","components/Scoreboard/index.js","components/Board/index.js","App.js","reportWebVitals.js","index.js"],"names":["ScoreboardCharacter","name","icon","score","className","Scoreboard","personOption","robotOption","personScore","robotScore","options","pedra","papel","tesoura","Board","useState","firstPlayerOption","setFirstPlayerOption","setRobotOption","firstPlayerScore","setFirstPlayerScore","setRobotScore","setOption","firstPlayer","robot","Math","floor","random","length","option","console","log","onClickReset","onClick","alert","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAEO,SAASA,EAAT,GAAyD,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,KAAmB,IAAbC,aAAa,MAAL,EAAK,EAC7D,OACE,sBAAKC,UAAU,kBAAf,UACE,8BAAIH,EAAJ,OACA,mBAAGG,UAAU,yBAAb,SAAuCD,IACvC,+BAAOD,O,MCJN,SAASG,EAAT,GAKH,IAJFC,EAIC,EAJDA,aACAC,EAGC,EAHDA,YACAC,EAEC,EAFDA,YACAC,EACC,EADDA,WAEMC,EAAU,CAAEC,MAAO,SAAKC,MAAO,eAAMC,QAAS,UAEpD,OACE,sBAAKT,UAAU,aAAf,UACE,cAACJ,EAAD,CACEC,KAAK,UACLE,MAAOK,EACPN,KAAMI,EAAeI,EAAQJ,GAAgB,iBAE/C,cAACN,EAAD,CACEC,KAAK,aACLE,MAAOM,EACPP,KAAMK,EAAcG,EAAQH,GAAe,oBChB5C,SAASO,IACd,IAAMJ,EAAU,CAAC,QAAS,QAAS,WAEnC,EAAkDK,mBAAS,IAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KACA,EAAsCF,mBAAS,IAA/C,mBAAOR,EAAP,KAAoBW,EAApB,KAEA,EAAgDH,mBAAS,GAAzD,mBAAOI,EAAP,KAAyBC,EAAzB,KACA,EAAoCL,mBAAS,GAA7C,mBAAON,EAAP,KAAmBY,EAAnB,KAEA,SAASC,EAAUC,GACjB,IAAMC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWjB,EAAQkB,QAE3CC,EAASnB,EAAQc,GAEnBK,GAAUN,IACRM,IAAWN,EACbO,QAAQC,IAAI,UACQ,UAAXF,GAAsC,YAAhBN,GAEX,YAAXM,GAAwC,UAAhBN,GAEb,UAAXM,GAAsC,UAAhBN,EAH/BF,EAAcZ,EAAa,GAM3BW,EAAoBD,EAAmB,IAI3CD,EAAeR,EAAQc,IACvBP,EAAqBM,GAGvB,SAASS,IACPf,EAAqB,IACrBI,EAAc,GACdD,EAAoB,GACpBF,EAAe,IAejB,OACE,gCACE,sBAAKd,UAAU,QAAf,UACE,wDAEA,sDAEA,sBAAKA,UAAU,gBAAf,UACE,wBAAQ6B,QAAS,kBAAMX,EAAUZ,EAAQ,KAAzC,oBACA,wBAAQuB,QAAS,kBAAMX,EAAUZ,EAAQ,KAAzC,oBACA,wBAAQuB,QAAS,kBAAMX,EAAUZ,EAAQ,KAAzC,uBAGF,cAACL,EAAD,CACEC,aAAcU,EACdT,YAAaA,EACbC,YAAaW,EACbV,WAAYA,OAGhB,sBAAKL,UAAU,wBAAf,UACE,wBAAQ6B,QAASD,EAAc5B,UAAU,eAAzC,qBAGA,wBAAQ6B,QApCd,WACMd,EAAmBV,EACrByB,MAAM,+BACGf,EAAmBV,EAC5ByB,MAAM,4CAENA,MAAM,wBAGRF,KA2BI,qCCtEOG,MARf,WACE,OACE,qBAAK/B,UAAU,MAAf,SACE,cAACU,EAAD,OCOSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.94a98e46.chunk.js","sourcesContent":["import \"./styles.scss\";\r\n\r\nexport function ScoreboardCharacter({ name, icon, score = 0 }) {\r\n  return (\r\n    <div className=\"scoreboard-char\">\r\n      <p>{name}:</p>\r\n      <p className=\"scoreboard-char-points\">{score}</p>\r\n      <span>{icon}</span>\r\n    </div>\r\n  );\r\n}\r\n","import { ScoreboardCharacter } from \"../ScoreboardCharacter\";\r\nimport \"./styles.scss\";\r\n\r\nexport function Scoreboard({\r\n  personOption,\r\n  robotOption,\r\n  personScore,\r\n  robotScore,\r\n}) {\r\n  const options = { pedra: \"âœŠ\", papel: \"ðŸ¤š\", tesoura: \"âœŒ\" };\r\n\r\n  return (\r\n    <div className=\"scoreboard\">\r\n      <ScoreboardCharacter\r\n        name=\"VocÃª\"\r\n        score={personScore}\r\n        icon={personOption ? options[personOption] : \"ðŸ‘©\"}\r\n      />\r\n      <ScoreboardCharacter\r\n        name=\"Computador\"\r\n        score={robotScore}\r\n        icon={robotOption ? options[robotOption] : \"ðŸ‘¾\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.scss\";\r\n\r\nimport { useState } from \"react\";\r\nimport { Scoreboard } from \"../Scoreboard\";\r\n\r\nexport function Board() {\r\n  const options = [\"pedra\", \"papel\", \"tesoura\"];\r\n\r\n  const [firstPlayerOption, setFirstPlayerOption] = useState(\"\");\r\n  const [robotOption, setRobotOption] = useState(\"\");\r\n\r\n  const [firstPlayerScore, setFirstPlayerScore] = useState(0);\r\n  const [robotScore, setRobotScore] = useState(0);\r\n\r\n  function setOption(firstPlayer) {\r\n    const robot = Math.floor(Math.random() * options.length);\r\n\r\n    const option = options[robot];\r\n\r\n    if (option && firstPlayer) {\r\n      if (option === firstPlayer) {\r\n        console.log(\"empate\");\r\n      } else if (option === \"pedra\" && firstPlayer === \"tesoura\") {\r\n        setRobotScore(robotScore + 1);\r\n      } else if (option === \"tesoura\" && firstPlayer === \"papel\") {\r\n        setRobotScore(robotScore + 1);\r\n      } else if (option === \"papel\" && firstPlayer === \"pedra\") {\r\n        setRobotScore(robotScore + 1);\r\n      } else {\r\n        setFirstPlayerScore(firstPlayerScore + 1);\r\n      }\r\n    }\r\n\r\n    setRobotOption(options[robot]);\r\n    setFirstPlayerOption(firstPlayer);\r\n  }\r\n\r\n  function onClickReset() {\r\n    setFirstPlayerOption(\"\");\r\n    setRobotScore(0);\r\n    setFirstPlayerScore(0);\r\n    setRobotOption(\"\");\r\n  }\r\n\r\n  function onClickFinish() {\r\n    if (firstPlayerScore > robotScore) {\r\n      alert(\"VocÃª venceu ðŸŽ‰\");\r\n    } else if (firstPlayerScore < robotScore) {\r\n      alert(\"O computador venceu vocÃª ðŸ˜¯\");\r\n    } else {\r\n      alert(\"Empatou ðŸ˜¢\");\r\n    }\r\n\r\n    onClickReset();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"board\">\r\n        <h1>Pedra, papel, tesoura!</h1>\r\n\r\n        <h4>Escolha a sua jogada</h4>\r\n\r\n        <div className=\"board-options\">\r\n          <button onClick={() => setOption(options[0])}>âœŠ</button>\r\n          <button onClick={() => setOption(options[1])}>âœ‹</button>\r\n          <button onClick={() => setOption(options[2])}>âœŒ</button>\r\n        </div>\r\n\r\n        <Scoreboard\r\n          personOption={firstPlayerOption}\r\n          robotOption={robotOption}\r\n          personScore={firstPlayerScore}\r\n          robotScore={robotScore}\r\n        />\r\n      </div>\r\n      <div className=\"board-button-commands\">\r\n        <button onClick={onClickReset} className=\"button-reset\">\r\n          Resetar\r\n        </button>\r\n        <button onClick={onClickFinish}>Finalizar partida</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { Board } from \"./components/Board\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/styles/global.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}